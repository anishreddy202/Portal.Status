{
  "name": "mongoDAL",
  "author": {
    "name": "Daniel Scholl"
  },
  "description": "A light wrapper for MongoDB",
  "version": "1.0.0",
  "private": true,
  "scripts": {
    "test": "NODE_ENV=test mocha -w"
  },
  "main": "../lib/db",
  "dependencies": {
    "async": "~0.2.9",
    "lodash": "^2.4.1",
    "mongodb": "^2.0.2"
  },
  "devDependencies": {
    "chai": "~1.7.2",
    "mocha": "*",
    "should": "^4.6.2"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/vzdigitalmedia/mongoDAL.lib.git"
  },
  "keywords": [
    "database",
    "query",
    "mongodb",
    "nosql"
  ],
  "engines": {
    "node": ">= 0.10.1"
  },
  "readme": "# Abstraction Layer for MongoDB\n\nWe wanted to be able to provide a common interface to different databases.\n\n1. MongoDB\n2. RethinkDB\n3. Direct File System\n\nThe [second-thought](https://github.com/robconery/second-thought/blob/master/README.md) module from Rob Conery provided a nice simple way to do this. So assuming that no lower level data was made out of the abstraction one could replace the Abstraction and switch databases. This code base then is a direct adaption of his code and ideas. Since RethinkDB uses 'id' and Mongo uses '_id' the code ensures that 'id' is available.\n\n__Functionality:__\n\n - Query, which returns an array\n - First, Exists\n - Save, which upserts a record\n - Automatic table/db config\n - DB Manipulation (Create/Drop)\n\n\n## Usage\n\nWe haven't pushed this up to NPM yet.\nInstall using\n\n```\nnpm install git+https://github.com/vzdigitalmedia/mongoDAL.lib --save\n```\n\nTo use this in your code, just configure what you need:\n\n```javascript\nvar db = require(\"mongoDAL\");\ndb.connect({db : \"test\"}, function(err,db){\n\n  //you now have access to all of your tables as properties on your db variable:\n  //so, assume there's a table called \"foo\" in your db...\n  db.foo.save({name : \"Mike\"}, function(err,saved){\n\n    //output the generated ID\n    console.log(saved.id);\n  });\n\n});\n```\n\nEach table on your DB object is a full-blown Mongo collection, so you can step outside the abstraction at any point:\n\n```javascript\ndb.openConnection(function(err,conn){\n\n  //this is a ReQL query\n  db.foo.eqJoin('bar_id', db.bar).run(conn, function(err,cursor){\n\n    //run the joined action and do something interesting\n    cursor.toArray(function(err,array){\n      //use the array...\n\n      //be sure to close the connection!\n      conn.close();\n    });\n\n  });\n});\n\n```\n\nIn addition you can do all kinds of fun things, like...\n\n```javascript\n//installation of the DB and tables\ndb.connect({db : \"test\"}, function(err, db){\n  db.install(['foo', 'bar'], function(err,result){\n    //tables should be installed now...\n  });\n});\n\n//add a secondary index\ndb.connect({db : \"test\"}, function(err,db){\n\n  db.foo.index(\"email\", function(err, indexed){\n    //indexed == true;\n  });\n});\n```\n\n## Basic Queries\n\n```javascript\n\ndb.connect({db : \"test\", function(err,db){\n\n  db.foo.query({category : \"beer\"}, function(err,beers){\n    //beers is an array, so have at it\n  });\n\n  db.foo.first({email : \"john.doe@mail.com\"}, function(err,rob){\n    //hi John\n  });\n\n  db.foo.exists({name : \"bill\"}, function(err, exists){\n    //exists will tell you if it's there\n  });\n\n  db.foo.destroy({id : \"some-id\"}, function(err,destroyed){\n    //destroyed will be true if something was deleted\n  });\n\n  db.foo.destroyAll(function(err,destroyed){\n    //destroyed is the count of records whacked\n  });\n\n  db.foo.updateOnly({name : \"Stevie\"}, \"some-id\", function(err,result){\n    //save will do a full swap of the document, updateOnly will partially update\n    //a document so you need to pass the id along\n    //result will be true if an update happened\n  });\n\n});\n\n```\n\nHave a look at the tests to see a bit more\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/vzdigitalmedia/mongoDAL.lib/issues"
  },
  "homepage": "https://github.com/vzdigitalmedia/mongoDAL.lib",
  "_id": "mongoDAL@1.0.0",
  "_shasum": "09e3067b48e03e39a23e571df39b356a0bbd0a7c",
  "_resolved": "git+https://github.com/vzdigitalmedia/mongoDAL.lib#36053645161c3494322782b1d53381eea4239a29",
  "_from": "git+https://github.com/vzdigitalmedia/mongoDAL.lib"
}
